# Production Dockerfile for LoveConnect Dating App
# Multi-stage build for optimized production image

FROM nginx:1.25-alpine as nginx-base

# Copy nginx configuration
COPY nginx.conf /etc/nginx/nginx.conf
RUN rm -f /etc/nginx/conf.d/default.conf

###########################################
# PHP Stage
###########################################
FROM php:8.2-fpm-alpine as php-base

# Install system dependencies
RUN apk add --no-cache \
    curl \
    libpng-dev \
    libzip-dev \
    zip \
    unzip \
    git \
    oniguruma-dev \
    icu-dev \
    freetype-dev \
    libjpeg-turbo-dev \
    libwebp-dev \
    supervisor

# Install PHP extensions
RUN docker-php-ext-configure gd --with-freetype --with-jpeg --with-webp \
    && docker-php-ext-install \
        pdo \
        pdo_mysql \
        mysqli \
        gd \
        zip \
        opcache \
        intl \
        mbstring \
        bcmath \
        exif

# Configure PHP for production
RUN mv "$PHP_INI_DIR/php.ini-production" "$PHP_INI_DIR/php.ini"

# Add custom PHP configuration
COPY <<EOF /usr/local/etc/php/conf.d/production.ini
; Production PHP Settings
opcache.enable=1
opcache.memory_consumption=256
opcache.max_accelerated_files=20000
opcache.revalidate_freq=60
opcache.validate_timestamps=0
opcache.save_comments=0
opcache.fast_shutdown=1

; Security Settings
expose_php=Off
display_errors=Off
log_errors=On
error_log=/var/log/php_errors.log

; Performance Settings
memory_limit=256M
max_execution_time=30
post_max_size=8M
upload_max_filesize=2M
max_file_uploads=20

; Session Security
session.cookie_httponly=1
session.cookie_secure=1
session.use_strict_mode=1
session.cookie_samesite=Strict
EOF

# Configure PHP-FPM for production
RUN echo "pm = dynamic" >> /usr/local/etc/php-fpm.d/www.conf \
    && echo "pm.max_children = 50" >> /usr/local/etc/php-fpm.d/www.conf \
    && echo "pm.start_servers = 10" >> /usr/local/etc/php-fpm.d/www.conf \
    && echo "pm.min_spare_servers = 5" >> /usr/local/etc/php-fpm.d/www.conf \
    && echo "pm.max_spare_servers = 35" >> /usr/local/etc/php-fpm.d/www.conf \
    && echo "pm.max_requests = 500" >> /usr/local/etc/php-fpm.d/www.conf

###########################################
# Final Production Image
###########################################
FROM nginx:1.25-alpine

# Install PHP, MariaDB client, and supervisor
RUN apk add --no-cache \
    php82 \
    php82-fpm \
    php82-pdo \
    php82-pdo_mysql \
    php82-mysqli \
    php82-gd \
    php82-zip \
    php82-opcache \
    php82-intl \
    php82-mbstring \
    php82-bcmath \
    php82-exif \
    php82-session \
    php82-json \
    mariadb \
    mariadb-client \
    supervisor \
    && ln -sf php82 /usr/bin/php

# Create necessary directories
RUN mkdir -p /var/www/html \
             /var/lib/mysql \
             /var/log/supervisor \
             /run/php \
             /var/log/php

# Copy PHP configuration from build stage
COPY --from=php-base /usr/local/etc/php/conf.d/production.ini /etc/php82/conf.d/

# Copy application code
COPY app/ /var/www/html/

# Copy nginx configuration
COPY nginx.conf /etc/nginx/nginx.conf

# Create supervisor configuration
COPY <<EOF /etc/supervisor/conf.d/supervisord.conf
[unix_http_server]
file=/var/run/supervisor.sock
chmod=0700

[supervisord]
nodaemon=true
logfile=/var/log/supervisor/supervisord.log
pidfile=/var/run/supervisord.pid
user=root

[rpcinterface:supervisor]
supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface

[supervisorctl]
serverurl=unix:///var/run/supervisor.sock

[program:nginx]
command=nginx -g "daemon off;"
autostart=true
autorestart=true
stdout_logfile=/var/log/supervisor/nginx.log
stderr_logfile=/var/log/supervisor/nginx.log

[program:php-fpm]
command=php-fpm82 --nodaemonize --fpm-config /etc/php82/php-fpm.conf
autostart=true
autorestart=true
stdout_logfile=/var/log/supervisor/php-fpm.log
stderr_logfile=/var/log/supervisor/php-fpm.log

[program:mariadb]
command=mysqld_safe --datadir=/var/lib/mysql --user=mysql
autostart=true
autorestart=true
stdout_logfile=/var/log/supervisor/mysql.log
stderr_logfile=/var/log/supervisor/mysql.log
EOF

# Create PHP-FPM configuration
COPY <<EOF /etc/php82/php-fpm.conf
[global]
pid = /run/php/php82-fpm.pid
error_log = /var/log/php/php82-fpm.log
daemonize = no

[www]
user = nginx
group = nginx
listen = /run/php/php82-fpm.sock
listen.owner = nginx
listen.group = nginx
listen.mode = 0660
pm = dynamic
pm.max_children = 50
pm.start_servers = 10
pm.min_spare_servers = 5
pm.max_spare_servers = 35
pm.max_requests = 500
EOF

# Database initialization script
COPY <<EOF /docker-entrypoint.sh
#!/bin/sh
set -e

# Validate required environment variables
if [ -z "\$DB_PASS" ]; then
    echo "ERROR: DB_PASS environment variable is required"
    exit 1
fi

# Initialize MySQL data directory if it doesn't exist
if [ ! -d "/var/lib/mysql/mysql" ]; then
    echo "Initializing MariaDB..."
    mysql_install_db --user=mysql --datadir=/var/lib/mysql --auth-root-authentication-method=normal
    
    # Start MySQL temporarily
    mysqld_safe --datadir=/var/lib/mysql --user=mysql &
    MYSQL_PID=\$!
    
    # Wait for MySQL to be ready
    echo "Waiting for MySQL to start..."
    sleep 15
    
    # Test connection before proceeding
    while ! mysqladmin ping -h localhost --silent; do
        echo "Waiting for MySQL to be ready..."
        sleep 2
    done
    
    echo "Setting up database and user..."
    # Set up database and user using environment variables
    mysql -e "CREATE DATABASE IF NOT EXISTS \`\${DB_NAME}\`;"
    mysql -e "CREATE USER IF NOT EXISTS '\${DB_USER}'@'%' IDENTIFIED BY '\${DB_PASS}';"
    mysql -e "CREATE USER IF NOT EXISTS '\${DB_USER}'@'localhost' IDENTIFIED BY '\${DB_PASS}';"
    mysql -e "GRANT ALL PRIVILEGES ON \`\${DB_NAME}\`.* TO '\${DB_USER}'@'%';"
    mysql -e "GRANT ALL PRIVILEGES ON \`\${DB_NAME}\`.* TO '\${DB_USER}'@'localhost';"
    mysql -e "FLUSH PRIVILEGES;"
    
    # Import schema if it exists
    if [ -f "/var/www/html/schema.sql" ]; then
        echo "Importing database schema..."
        mysql "\${DB_NAME}" < /var/www/html/schema.sql
    fi
    
    # Stop temporary MySQL
    echo "Database initialization complete. Stopping temporary MySQL..."
    kill \$MYSQL_PID
    wait \$MYSQL_PID
fi

# Set proper permissions
chown -R nginx:nginx /var/www/html
chown -R mysql:mysql /var/lib/mysql
chmod -R 755 /var/www/html

# Start supervisor
exec supervisord -c /etc/supervisor/conf.d/supervisord.conf
EOF

# Make entrypoint executable
RUN chmod +x /docker-entrypoint.sh

# Set proper permissions
RUN chown -R nginx:nginx /var/www/html \
    && chown -R mysql:mysql /var/lib/mysql

# Expose ports
EXPOSE 80 3306

# Environment variables (defaults only - override with --env or env_file)
ENV DB_HOST=localhost
ENV DB_NAME=login_system
ENV DB_USER=root
ENV DB_PASS=""
ENV PHP_MEMORY_LIMIT=256M
ENV PHP_MAX_EXECUTION_TIME=30
ENV APP_ENV=production
ENV APP_DEBUG=false

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
  CMD curl -f http://localhost/health.php || exit 1

# Volume for persistent data
VOLUME ["/var/lib/mysql"]

# Start the application
ENTRYPOINT ["/docker-entrypoint.sh"]